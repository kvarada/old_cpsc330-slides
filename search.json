[
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#announcements",
    "href": "slides-04-kNNs-SVM-RBF.html#announcements",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Announcements",
    "text": "Announcements\n\nhw2 was due yesterday.\nHomework 3 (hw3) has been released (Due: Oct 1st, 11:59pm)\n\nYou are welcome to broadly discuss it with your classmates but final answers and submissions must be your own.\nYou can work in pairs for this assignment.\n\nIf you were on the waitlist, you should now know your course enrollment status. Registration for tutorials is not mandatory; they are optional and will follow an office-hour format. You are free to attend any tutorial session of your choice.\nEnsure to complete the syllabus quiz.\nThe lecture notes within these notebooks align with the content presented in the videos. Even though we do not cover all the content from these notebooks during lectures, it‚Äôs your responsibility to go through them on your own.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#recap",
    "href": "slides-04-kNNs-SVM-RBF.html#recap",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Recap",
    "text": "Recap\nWhich of the following scenarios do NOT necessarily imply overfitting?\n\n\nTraining accuracy is 0.98 while validation accuracy is 0.60.\n\n\nThe model is too specific to the training data.\n\n\nThe decision boundary of a classifier is wiggly and highly irregular.\n\n\nTraining and validation accuracies are both approximately 0.88.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#recap-1",
    "href": "slides-04-kNNs-SVM-RBF.html#recap-1",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Recap",
    "text": "Recap\nWhich of the following statements about overfitting is true?\n\n\nOverfitting is always beneficial for model performance on unseen data.\n\n\nThere is always going to be some overfitting in a given problem.\n\n\nOverfitting ensures the model will perform well in real-world scenarios.\n\n\nOverfitting occurs when the model learns the training data too closely, including its noise and outliers.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#recap-2",
    "href": "slides-04-kNNs-SVM-RBF.html#recap-2",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Recap",
    "text": "Recap\nHow might one address the issue of underfitting in a machine learning model.\n\n\nIntroduce more noise to the training data.\n\n\nRemove features that might be relevant to the prediction.\n\n\nIncrease the model‚Äôs complexity, possibly by adding more parameter or features\n\n\nUse a smaller dataset for training.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#recap-3",
    "href": "slides-04-kNNs-SVM-RBF.html#recap-3",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "Recap",
    "text": "Recap\n\nWhy do we split the data?\nWhat are train/valid/test splits?\nWhat are the benefits of cross-validation?\nWhat is overfitting?\nWhat‚Äôs the fundamental trade-off in supervised machine learning?\nWhat is the golden rule of machine learning?",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#iclicker-4.1",
    "href": "slides-04-kNNs-SVM-RBF.html#iclicker-4.1",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "iClicker 4.1",
    "text": "iClicker 4.1\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nAnalogy-based models find examples from the test set that are most similar to the query example we are predicting.\n\n\nEuclidean distance will always have a non-negative value.\n\n\nWith \\(k\\)-NN, setting the hyperparameter \\(k\\) to larger values typically reduces training error.\n\n\nSimilar to decision trees, \\(k\\)-NNs finds a small set of good features.\n\n\nIn \\(k\\)-NN, with \\(k &gt; 1\\), the classification of the closest neighbour to the test example always contributes the most to the prediction.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "slides-04-kNNs-SVM-RBF.html#iclicker-4.2",
    "href": "slides-04-kNNs-SVM-RBF.html#iclicker-4.2",
    "title": "Lecture 4: \\(k\\)-nearest neighbours and SVM RBFs",
    "section": "iClicker 4.2",
    "text": "iClicker 4.2\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\n\\(k\\)-NN may perform poorly in high-dimensional space (say, d &gt; 1000).\n\n\nIn sklearn‚Äôs SVC classifier, large values of gamma tend to result in higher training score but probably lower validation score.\n\n\nIf we increase both gamma and C, we can‚Äôt be certain if the model becomes more complex or less complex.",
    "crumbs": [
      "Lecture 4: $k$-nearest neighbours and SVM RBFs"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to CPSC330! Here, you‚Äôll find slides for CPSC 330 Section 102. These slides are based on the notes present here.\n\nClass times üïò 11 am to 12:20 pm\nWhere? üìç West Mall Swing Space (SWNG) - 222, 2175 West Mall, Vancouver, BC V6T 1Z4"
  },
  {
    "objectID": "slides-01-intro.html#learning-outcomes",
    "href": "slides-01-intro.html#learning-outcomes",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Learning outcomes",
    "text": "Learning outcomes\nFrom this lecture, you will be able to\n\nExplain the motivation behind study machine learning.\nBriefly describe supervised learning.\nDifferentiate between traditional programming and machine learning.\nAssess whether a given problem is suitable for a machine learning solution.\nNavigate through the course material.\nBe familiar with the policies and how the class is going to run.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#qr-code-of-cpsc-330-website",
    "href": "slides-01-intro.html#qr-code-of-cpsc-330-website",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "QR code of CPSC 330 website",
    "text": "QR code of CPSC 330 website\n\n\n\nCourse Jupyter book: https://ubc-cs.github.io/cpsc330-2024W1\nCourse GitHub repository: https://github.com/UBC-CS/cpsc330-2024W1",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#meet-your-instructor",
    "href": "slides-01-intro.html#meet-your-instructor",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Meet your instructor",
    "text": "Meet your instructor\n\n\n\n\n\nVarada Kolhatkar [ ã…ô…æ…ôda k…îÀêl…¶…ô àk…ôr]\nYou can call me Varada, V, or Ada.\nI am an Assistant Professor of Teaching in the Department of Computer Science.\nI did my Ph.D.¬†in Computational Linguistics at the University of Toronto.\nI primarily teach machine learning courses in the Master of Data Science (MDS) program.\nContact information\n\nEmail: kvarada@cs.ubc.ca\nOffice: ICCS 237",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#meet-eva-a-fictitious-persona",
    "href": "slides-01-intro.html#meet-eva-a-fictitious-persona",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Meet Eva (a fictitious persona)!",
    "text": "Meet Eva (a fictitious persona)!\n\n\n\n\nEva is among one of you. She has some experience in Python programming. She knows machine learning as a buzz word. During her recent internship, she has developed some interest and curiosity in the field. She wants to learn what is it and how to use it. She is a curious person and usually has a lot of questions!",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#you-all",
    "href": "slides-01-intro.html#you-all",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "You all",
    "text": "You all\n\nIntroduce yourself to your neighbour.\nSince we‚Äôre going to spend the semester with each other, I would like to know you a bit better.\nPlease fill out Getting to know you survey when you get a chance.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#asking-questions-during-class",
    "href": "slides-01-intro.html#asking-questions-during-class",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Asking questions during class",
    "text": "Asking questions during class\nYou are welcome to ask questions by raising your hand. There is also a reflection Google Document for this course for your questions/comments/reflections. It will be great if you can write about your takeaways, struggle points, and general comments in this document so that I‚Äôll try to address those points in the next lecture.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#activity-1-httpsshorturl.atcteou",
    "href": "slides-01-intro.html#activity-1-httpsshorturl.atcteou",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Activity 1: https://shorturl.at/CteOU",
    "text": "Activity 1: https://shorturl.at/CteOU\n\n\n\nWrite your answers to the questions below in this Google doc: https://shorturl.at/CteOU\nWhat do you know about machine learning?\nWhat would you like to get out this course?\nAre there any particular topics or aspects of this course that you are especially excited or anxious about? Why?",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#spam-prediction",
    "href": "slides-01-intro.html#spam-prediction",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Spam prediction",
    "text": "Spam prediction\n\nSuppose you are given some data with labeled spam and non-spam messages\n\n\nCodeOutput\n\n\n\nsms_df = pd.read_csv(DATA_DIR + \"spam.csv\", encoding=\"latin-1\")\nsms_df = sms_df.drop(columns = [\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"])\nsms_df = sms_df.rename(columns={\"v1\": \"target\", \"v2\": \"sms\"})\ntrain_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)\n\n\n\n\n\n\n\n\n\ntarget\nsms\n\n\n\n\nspam\nLookAtMe!: Thanks for your purchase of a video clip from LookAtMe!, you've been charged 35p. Think you can do better? Why not send a video in a MMSto 32323.\n\n\nham\nAight, I'll hit you up when I get some cash\n\n\nham\nDon no da:)whats you plan?\n\n\nham\nGoing to take your babe out ?\n\n\nham\nNo need lar. Jus testing e phone card. Dunno network not gd i thk. Me waiting 4 my sis 2 finish bathing so i can bathe. Dun disturb u liao u cleaning ur room.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#traditional-programming-vs.-ml",
    "href": "slides-01-intro.html#traditional-programming-vs.-ml",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Traditional programming vs.¬†ML",
    "text": "Traditional programming vs.¬†ML\n\nImagine writing a Python program for spam identification, i.e., whether a text message or an email is spam or non-spam.\nTraditional programming\n\nCome up with rules using human understanding of spam messages.\nTime consuming and hard to come up with robust set of rules.\n\nMachine learning\n\nCollect large amount of data of spam and non-spam emails and let the machine learning algorithm figure out rules.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#lets-train-a-model",
    "href": "slides-01-intro.html#lets-train-a-model",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Let‚Äôs train a model",
    "text": "Let‚Äôs train a model\n\nThere are several packages that help us perform machine learning.\n\n\nX_train, y_train = train_df[\"sms\"], train_df[\"target\"]\nX_test, y_test = test_df[\"sms\"], test_df[\"target\"]\nclf = make_pipeline(CountVectorizer(max_features=5000), LogisticRegression(max_iter=5000))\nclf.fit(X_train, y_train); # Training the model",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#unseen-messages",
    "href": "slides-01-intro.html#unseen-messages",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Unseen messages",
    "text": "Unseen messages\n\nNow use the trained model to predict targets of unseen messages:\n\n\n\n\n\n\n\n\n\n\nsms\n\n\n\n\n3245\nFunny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens\n\n\n944\nI sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one m...\n\n\n1044\nWe know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p\n\n\n2484\nOnly if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#predicting-on-unseen-data",
    "href": "slides-01-intro.html#predicting-on-unseen-data",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Predicting on unseen data",
    "text": "Predicting on unseen data\nThe model is accurately predicting labels for the unseen text messages above!\n\n\n\n\n\n\n\n¬†\nsms\nspam_predictions\n\n\n\n\n3245\nFunny fact Nobody teaches volcanoes 2 erupt, tsunamis 2 arise, hurricanes 2 sway aroundn no 1 teaches hw 2 choose a wife Natural disasters just happens\nham\n\n\n944\nI sent my scores to sophas and i had to do secondary application for a few schools. I think if you are thinking of applying, do a research on cost also. Contact joke ogunrinde, her school is one me the less expensive ones\nham\n\n\n1044\nWe know someone who you know that fancies you. Call 09058097218 to find out who. POBox 6, LS15HB 150p\nspam\n\n\n2484\nOnly if you promise your getting out as SOON as you can. And you'll text me in the morning to let me know you made it in ok.\nham",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#a-different-way-to-solve-problems",
    "href": "slides-01-intro.html#a-different-way-to-solve-problems",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "A different way to solve problems",
    "text": "A different way to solve problems\nMachine learning uses computer programs to model data. It can be used to extract hidden patterns, make predictions in new situation, or generate novel content.\n\nA field of study that gives computers the ability to learn without being explicitly programmed.  ‚Äì Arthur Samuel (1959)",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#ml-vs.-traditional-programming",
    "href": "slides-01-intro.html#ml-vs.-traditional-programming",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "ML vs.¬†traditional programming",
    "text": "ML vs.¬†traditional programming\n\nWith machine learning, you‚Äôre likely to\n\nSave time\nCustomize and scale products",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#prevalence-of-ml",
    "href": "slides-01-intro.html#prevalence-of-ml",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Prevalence of ML",
    "text": "Prevalence of ML\nLet‚Äôs look at some examples.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#activity-for-what-type-of-problems-ml-is-appropriate-5-mins",
    "href": "slides-01-intro.html#activity-for-what-type-of-problems-ml-is-appropriate-5-mins",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Activity: For what type of problems ML is appropriate? (~5 mins)",
    "text": "Activity: For what type of problems ML is appropriate? (~5 mins)\nDiscuss with your neighbour for which of the following problems you would use machine learning\n\nFinding a list of prime numbers up to a limit\nGiven an image, automatically identifying and labeling objects in the image\nFinding the distance between two nodes in a graph",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#types-of-machine-learning",
    "href": "slides-01-intro.html#types-of-machine-learning",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Types of machine learning",
    "text": "Types of machine learning\nHere are some typical learning problems.\n\nSupervised learning (Gmail spam filtering)\n\nTraining a model from input data and its corresponding targets to predict targets for new examples.\n\n\nUnsupervised learning (Google News)\n\nTraining a model to find patterns in a dataset, typically an unlabeled dataset.\n\nReinforcement learning (AlphaGo)\n\nA family of algorithms for finding suitable actions to take in a given situation in order to maximize a reward.\n\nRecommendation systems (Amazon item recommendation system)\n\nPredict the ‚Äúrating‚Äù or ‚Äúpreference‚Äù a user would give to an item.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#what-is-supervised-learning",
    "href": "slides-01-intro.html#what-is-supervised-learning",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "What is supervised learning?",
    "text": "What is supervised learning?\n\nTraining data comprises a set of observations (\\(X\\)) and their corresponding targets (\\(y\\)).\nWe wish to find a model function \\(f\\) that relates \\(X\\) to \\(y\\).\nWe use the model function to predict targets of new examples.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#evas-questions",
    "href": "slides-01-intro.html#evas-questions",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "ü§î Eva‚Äôs questions",
    "text": "ü§î Eva‚Äôs questions\n\n\nAt this point, Eva is wondering about many questions.\n\nHow are we exactly ‚Äúlearning‚Äù whether a message is spam and ham?\nAre we expected to get correct predictions for all possible messages? How does it predict the label for a message it has not seen before?\n\nWhat if the model mis-labels an unseen example? For instance, what if the model incorrectly predicts a non-spam as a spam? What would be the consequences?\nHow do we measure the success or failure of spam identification?\nIf you want to use this model in the wild, how do you know how reliable it is?\n\nWould it be useful to know how confident the model is about the predictions rather than just a yes or a no?\n\nIt‚Äôs great to think about these questions right now. But Eva has to be patient. By the end of this course you‚Äôll know answers to many of these questions!",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#predicting-labels-of-a-given-image",
    "href": "slides-01-intro.html#predicting-labels-of-a-given-image",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Predicting labels of a given image",
    "text": "Predicting labels of a given image\n\nWe can also use machine learning to predict labels of given images using a technique called transfer learning.\n\n\n\n\n\n\n\n\n\n\n\n                         Class  Probability score\n                     tiger cat              0.636\n              tabby, tabby cat              0.174\nPembroke, Pembroke Welsh corgi              0.081\n               lynx, catamount              0.011\n--------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n                                     Class  Probability score\n         cheetah, chetah, Acinonyx jubatus              0.994\n                  leopard, Panthera pardus              0.005\njaguar, panther, Panthera onca, Felis onca              0.001\n       snow leopard, ounce, Panthera uncia              0.000\n--------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n                                   Class  Probability score\n                                 macaque              0.885\npatas, hussar monkey, Erythrocebus patas              0.062\n      proboscis monkey, Nasalis larvatus              0.015\n                       titi, titi monkey              0.010\n--------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n                        Class  Probability score\nWalker hound, Walker foxhound              0.582\n             English foxhound              0.144\n                       beagle              0.068\n                  EntleBucher              0.059\n--------------------------------------------------------------",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#predicting-housing-prices",
    "href": "slides-01-intro.html#predicting-housing-prices",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Predicting housing prices",
    "text": "Predicting housing prices\nSuppose we want to predict housing prices given a number of attributes associated with houses. The target here is continuous and not discrete.\n\n\n\n\n\ntarget\nbedrooms\nbathrooms\nsqft_living\nsqft_lot\nfloors\nwaterfront\nview\ncondition\ngrade\nsqft_above\nsqft_basement\nyr_built\nyr_renovated\nzipcode\nlat\nlong\nsqft_living15\nsqft_lot15\n\n\n\n\n509000.0\n2\n1.50\n1930\n3521\n2.0\n0\n0\n3\n8\n1930\n0\n1989\n0\n98007\n47.6092\n-122.146\n1840\n3576\n\n\n675000.0\n5\n2.75\n2570\n12906\n2.0\n0\n0\n3\n8\n2570\n0\n1987\n0\n98075\n47.5814\n-122.050\n2580\n12927\n\n\n420000.0\n3\n1.00\n1150\n5120\n1.0\n0\n0\n4\n6\n800\n350\n1946\n0\n98116\n47.5588\n-122.392\n1220\n5120\n\n\n680000.0\n8\n2.75\n2530\n4800\n2.0\n0\n0\n4\n7\n1390\n1140\n1901\n0\n98112\n47.6241\n-122.305\n1540\n4800\n\n\n357823.0\n3\n1.50\n1240\n9196\n1.0\n0\n0\n3\n8\n1240\n0\n1968\n0\n98072\n47.7562\n-122.094\n1690\n10800",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#building-a-regression-model",
    "href": "slides-01-intro.html#building-a-regression-model",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Building a regression model",
    "text": "Building a regression model\n\nfrom lightgbm.sklearn import LGBMRegressor\n\nX_train, y_train = train_df.drop(columns= [\"target\"]), train_df[\"target\"]\nX_test, y_test = test_df.drop(columns= [\"target\"]), train_df[\"target\"]\n\nmodel = LGBMRegressor()\nmodel.fit(X_train, y_train);\n\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000819 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 2333\n[LightGBM] [Info] Number of data points in the train set: 17290, number of used features: 18\n[LightGBM] [Info] Start training from score 539762.702545",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#predicting-prices-of-unseen-houses",
    "href": "slides-01-intro.html#predicting-prices-of-unseen-houses",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Predicting prices of unseen houses",
    "text": "Predicting prices of unseen houses\n\n\n\n\n\nPredicted_target\nbedrooms\nbathrooms\nsqft_living\nsqft_lot\nfloors\nwaterfront\nview\ncondition\ngrade\nsqft_above\nsqft_basement\nyr_built\nyr_renovated\nzipcode\nlat\nlong\nsqft_living15\nsqft_lot15\n\n\n\n\n345831.740542\n4\n2.25\n2130\n8078\n1.0\n0\n0\n4\n7\n1380\n750\n1977\n0\n98055\n47.4482\n-122.209\n2300\n8112\n\n\n601042.018745\n3\n2.50\n2210\n7620\n2.0\n0\n0\n3\n8\n2210\n0\n1994\n0\n98052\n47.6938\n-122.130\n1920\n7440\n\n\n311310.186024\n4\n1.50\n1800\n9576\n1.0\n0\n0\n4\n7\n1800\n0\n1977\n0\n98045\n47.4664\n-121.747\n1370\n9576\n\n\n597555.592401\n3\n2.50\n1580\n1321\n2.0\n0\n2\n3\n8\n1080\n500\n2014\n0\n98107\n47.6688\n-122.402\n1530\n1357\n\n\n\n\n\nWe are predicting continuous values here as apposed to discrete values in spam vs.¬†ham example.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#machine-learning-workflow",
    "href": "slides-01-intro.html#machine-learning-workflow",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Machine learning workflow",
    "text": "Machine learning workflow\nSupervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.\n\n\n\n\n\n\nWe will build machine learning pipelines in this course, focusing on some of the steps above.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#questions-for-you",
    "href": "slides-01-intro.html#questions-for-you",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "‚ùì‚ùì Questions for you",
    "text": "‚ùì‚ùì Questions for you\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are True (iClicker)\n\n\nPredicting spam is an example of machine learning.\n\n\nPredicting housing prices is not an example of machine learning.\n\n\nFor problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it‚Äôs usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model.\n\n\nIf you are asked to write a program to find all prime numbers up to a limit, it is better to implement one of the algorithms for doing so rather than using machine learning.\n\n\nGoogle News is likely be using machine learning to organize news.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#surveys",
    "href": "slides-01-intro.html#surveys",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Surveys",
    "text": "Surveys\n\nPlease complete the ‚ÄúGetting to know you‚Äù survey on Canvas.\nAlso, please complete the anonymous restaurant survey on Qualtrics here.\n\nWe will try to analyze this data set in the coming weeks.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#about-this-course",
    "href": "slides-01-intro.html#about-this-course",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "About this course",
    "text": "About this course\n\n\n\n\n\n\nImportant\n\n\nCourse website: https://github.com/UBC-CS/cpsc330-2024W1 is the most important link. Please read everything on this GitHub page!\n\n\n\n\n\n\n\n\n\nImportant\n\n\nMake sure you go through the syllabus thoroughly and complete the syllabus quiz before Monday, Sept 19th at 11:59pm.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#cpsc-330-vs.-340",
    "href": "slides-01-intro.html#cpsc-330-vs.-340",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "CPSC 330 vs.¬†340",
    "text": "CPSC 330 vs.¬†340\nRead https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md which explains the difference between two courses.\nTLDR:\n\n340: how do ML models work?\n330: how do I use ML models?\nCPSC 340 has many prerequisites.\nCPSC 340 goes deeper but has a more narrow scope.\nI think CPSC 330 will be more useful if you just plan to apply basic ML.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#registration-waitlist-and-prerequisites",
    "href": "slides-01-intro.html#registration-waitlist-and-prerequisites",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Registration, waitlist and prerequisites",
    "text": "Registration, waitlist and prerequisites\n\n\n\n\n\n\nImportant\n\n\nPlease go through this document carefully before contacting your instructors about these issues. Even then, we are very unlikely to be able to help with registration, waitlist or prerequisite issues.\n\n\n\n\nIf you are on waitlist and if you‚Äôd like to try your chances, you should be able to access Canvas and Piazza.\n\nIf you‚Äôre unable to make it this time, there will be two sections of this course offered next semester and then again in the summer.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#lecture-format",
    "href": "slides-01-intro.html#lecture-format",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Lecture format",
    "text": "Lecture format\n\nIn person lectures T/Th.\nSometimes there will be videos to watch before lecture. You will find the list of pre-watch videos in the schedule on the course webpage.\nWe will also try to work on some questions and exercises together during the class.\nAll materials will be posted in this GitHub repository.\nWeekly tutorials will be office hour format run by the TAs and are completely optional.\n\nYou do not need to be registered in a tutorial.\nYou can attend whatever tutorials or office hours your want, regardless of in which/whether you‚Äôre registered.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#home-work-assignments",
    "href": "slides-01-intro.html#home-work-assignments",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Home work assignments",
    "text": "Home work assignments\n\nFirst homework assignment is due this coming Tuesday, September 10, midnight. This is a relatively straightforward assignment on Python. If you struggle with this assignment then that could be a sign that you will struggle later on in the course.\n\nYou must do the first two homework assignments on your own.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#exams",
    "href": "slides-01-intro.html#exams",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Exams",
    "text": "Exams\n\nWe‚Äôll have two self-scheduled midterms and one final in Computer-based Testing Facility (CBTF).",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#course-calendar",
    "href": "slides-01-intro.html#course-calendar",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course calendar",
    "text": "Course calendar\nHere is our course Calendar. Make sure you check it on a regular basis:\nhttps://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#course-structure",
    "href": "slides-01-intro.html#course-structure",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course structure",
    "text": "Course structure\n\nIntroduction\n\nWeek 1\n\nPart I: ML fundamentals, preprocessing, midterm 1\n\nWeeks 2, 3, 4, 5, 6, 7, 8\n\nPart II: Unsupervised learning, transfer learning, common special cases, midterm 1\n\nWeeks 8, 9, 10, 11, 12\n\nPart III: Communication and ethics\n\nML skills are not beneficial if you can‚Äôt use them responsibly and communicate your results. In this module we‚Äôll talk about these aspects.\nWeeks 13, 14",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#code-of-conduct",
    "href": "slides-01-intro.html#code-of-conduct",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Code of conduct",
    "text": "Code of conduct\n\nOur main forum for getting help will be Piazza.\n\n\n\n\n\n\n\nImportant\n\n\nPlease read this entire document about asking for help. TLDR: Be nice.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#homework-format-jupyter-notebooks",
    "href": "slides-01-intro.html#homework-format-jupyter-notebooks",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Homework format: Jupyter notebooks",
    "text": "Homework format: Jupyter notebooks\n\nOur notes are created in a Jupyter notebook, with file extension .ipynb.\nAlso, you will complete your homework assignments using Jupyter notebooks.\nConfusingly, ‚ÄúJupyter notebook‚Äù is also the original application that opens .ipynb files - but has since been replaced by Jupyter lab.\n\nI am using Jupyter lab, some things might not work with the Jupyter notebook application.\nYou can also open these files in Visual Studio Code.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#jupyter-notebooks",
    "href": "slides-01-intro.html#jupyter-notebooks",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Jupyter notebooks",
    "text": "Jupyter notebooks\n\nNotebooks contain a mix of code, code output, markdown-formatted text (including LaTeX equations), and more.\nWhen you open a Jupyter notebook in one of these apps, the document is ‚Äúlive‚Äù, meaning you can run the code.\n\nFor example:\n\n1 + 1\n\n2\n\n\n\nx = [1, 2, 3]\nx[0] = 9999\nx\n\n[9999, 2, 3]",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#jupyter",
    "href": "slides-01-intro.html#jupyter",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Jupyter",
    "text": "Jupyter\n\nBy default, Jupyter prints out the result of the last line of code, so you don‚Äôt need as many print statements.\nIn addition to the ‚Äúlive‚Äù notebooks, Jupyter notebooks can be statically rendered in the web browser, e.g.¬†this.\n\nThis can be convenient for quick read-only access, without needing to launch the Jupyter notebook/lab application.\nBut you need to launch the app properly to interact with the notebooks.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#lecture-notes",
    "href": "slides-01-intro.html#lecture-notes",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Lecture notes",
    "text": "Lecture notes\n\nAll the lectures from last year are available here.\nWe cannot promise anything will stay the same from last year to this year, so read them in advance at your own risk.\nA ‚Äúfinalized‚Äù version will be pushed to GitHub and the Jupyter book right before each class.\nEach instructor will have slightly adapted versions of notes to present slides during lectures.\n\nYou will find the link to these slides in our repository: https://github.com/UBC-CS/cpsc330-2024W1/tree/main/lectures/102-Varada-lectures",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#grades",
    "href": "slides-01-intro.html#grades",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Grades",
    "text": "Grades\n\nThe grading breakdown is here.\nThe policy on challenging grades is here.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#recommended-browser-and-tools",
    "href": "slides-01-intro.html#recommended-browser-and-tools",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Recommended browser and tools",
    "text": "Recommended browser and tools\n\nYou can install Chrome here.\nYou can install Firefox here.\n\nIn this course, we will primarily be using Python , git, GitHub, Canvas, Gradescope, Piazza, and PrairieLearn.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#course-conda-environment",
    "href": "slides-01-intro.html#course-conda-environment",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Course conda environment",
    "text": "Course conda environment\n\nFollow the setup instructions here to create a course conda environment on your computer.\nIf you do not have your computer with you, you can partner up with someone and set up your own computer later.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#python-requirementsresources",
    "href": "slides-01-intro.html#python-requirementsresources",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Python requirements/resources",
    "text": "Python requirements/resources\nWe will primarily use Python in this course.\nHere is the basic Python knowledge you‚Äôll need for the course:\n\nBasic Python programming\nNumpy\nPandas\nBasic matplotlib\nSparse matrices\n\nHomework 1 is all about Python.\n\n\n\n\n\n\nNote\n\n\nWe do not have time to teach all the Python we need but you can find some useful Python resources here.",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-01-intro.html#checklist-for-you-before-the-next-class",
    "href": "slides-01-intro.html#checklist-for-you-before-the-next-class",
    "title": "Lecture 1: Introduction to CPSC 330",
    "section": "Checklist for you before the next class",
    "text": "Checklist for you before the next class\n\nAre you able to access course Canvas shell?\nAre you able to access course Piazza?\nAre you able to access Gradescope? (If not, refer to the Gradescope Student Guide.)\nAre you able to access iClicker Cloud for this course?\nDid you follow the setup instructions here to create a course conda environment on your computer?\nDid you complete the ‚ÄúGetting to know you‚Äù survey on Canvas?\nDid you complete the anonymous restaurant survey on Qualtrics?\nAre you almost finished or at least started with homework 1?",
    "crumbs": [
      "Lecture 1: Introduction to CPSC 330"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#announcements",
    "href": "slides-02-terminology-decision-trees.html#announcements",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Announcements",
    "text": "Announcements\n\nThings due this week\n\nHomework 1 (hw1): Due Sept 10 11:59pm\n\nHomework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n\nThere is some autograding in this homework.\n\nYou can find the tentative due dates for all deliverables here.\nPlease monitor Piazza (especially pinned posts and instructor posts) for announcements.\nI‚Äôll assume that you‚Äôve watched the pre-lecture videos.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#recap-what-is-ml",
    "href": "slides-02-terminology-decision-trees.html#recap-what-is-ml",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Recap: What is ML?",
    "text": "Recap: What is ML?\n\nML uses data to build models that find patterns, make predictions, or generate content.\nIt helps computers learn from data to make decisions.\nNo one model works for every situation.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#recap-supervised-learning",
    "href": "slides-02-terminology-decision-trees.html#recap-supervised-learning",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Recap: Supervised learning",
    "text": "Recap: Supervised learning\n\nWe wish to find a model function \\(f\\) that relates \\(X\\) to \\(y\\).\nWe use the model function to predict targets of new examples.\n\n\n\n\n\n\nIn the first part of this course, we‚Äôll focus on supervised machine learning.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#framework",
    "href": "slides-02-terminology-decision-trees.html#framework",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Framework",
    "text": "Framework\n\nThere are many frameworks to do do machine learning.\nWe‚Äôll mainly be using scikit-learn framework.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#running-example",
    "href": "slides-02-terminology-decision-trees.html#running-example",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Running example",
    "text": "Running example\nImagine you‚Äôre in the fortunate situation where, after graduating, you have a few job offers and need to decide which one to choose. You want to pick the job that will likely make you the happiest. To help with your decision, you collect data from like-minded people. Here are the first few rows of this toy dataset.\n\ntoy_happiness_df = pd.read_csv(DATA_DIR + 'toy_job_happiness.csv')\ntoy_happiness_df\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\n\n\n2\n1\n80000\n1\n0\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#features-target-example",
    "href": "slides-02-terminology-decision-trees.html#features-target-example",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Features, target, example",
    "text": "Features, target, example\n\nWhat are the features \\(X\\)?\n\nfeatures = inputs = predictors = explanatory variables = regressors = independent variables = covariates\n\nWhat‚Äôs the target \\(y\\)?\n\ntarget = output = outcome = response variable = dependent variable = labels\n\nCan you think of other relevant features for this problem?\nWhat is an example?",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#classification-vs.-regression",
    "href": "slides-02-terminology-decision-trees.html#classification-vs.-regression",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Classification vs.¬†Regression",
    "text": "Classification vs.¬†Regression\n\nIs this a classification problem or a regression problem?\n\n\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\n\n\n2\n1\n80000\n1\n0\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction-vs.-inference",
    "href": "slides-02-terminology-decision-trees.html#prediction-vs.-inference",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction vs.¬†Inference",
    "text": "Prediction vs.¬†Inference\n\nInference is using the model to understand the relationship between the features and the target\n\nWhy certain factors influence happiness?\n\nPrediction is using the model to predict the target value for new examples based on learned patterns.\nOf course these goals are related, and in many situations we need both.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training",
    "href": "slides-02-terminology-decision-trees.html#training",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training",
    "text": "Training\n\nIn supervised ML, the goal is to learn a function that maps input features (\\(X\\)) to a target (\\(y\\)).\nThe relationship between \\(X\\) and \\(y\\) is often complex, making it difficult to define mathematically.\nWe use algorithms to approximate this complex relationship between \\(X\\) and \\(y\\).\nTraining is the process of applying an algorithm to learn the best function (or model) that maps \\(X\\) to \\(y\\).\nIn this course, I‚Äôll help you develop an intuition for how these models work and demonstrate how to use them in a machine learning pipeline.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#separating-x-and-y",
    "href": "slides-02-terminology-decision-trees.html#separating-x-and-y",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Separating \\(X\\) and \\(y\\)",
    "text": "Separating \\(X\\) and \\(y\\)\n\nIn order to train a model we need to separate \\(X\\) and \\(y\\) from the dataframe.\n\n\nX = toy_happiness_df.drop(columns=[\"happy?\"]) # Extract the feature set by removing the target column \"happy?\"\ny = toy_happiness_df[\"happy?\"] # Extract the target variable \"happy?\"",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#baseline",
    "href": "slides-02-terminology-decision-trees.html#baseline",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Baseline",
    "text": "Baseline\n\nLet‚Äôs try a simplest algorithm of predicting the most popular target!\n\n\nfrom sklearn.dummy import DummyClassifier\nmodel = DummyClassifier(strategy=\"most_frequent\") # Initialize the DummyClassifier to always predict the most frequent class\nmodel.fit(X, y) # Train the model on the feature set X and target variable y\ntoy_happiness_df['dummy_predictions'] = model.predict(X) # Add the predicted values as a new column in the dataframe\ntoy_happiness_df\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\nhappy?\ndummy_predictions\n\n\n\n\n0\n0\n70000\n0\n1\nUnhappy\nHappy\n\n\n1\n1\n60000\n0\n0\nUnhappy\nHappy\n\n\n2\n1\n80000\n1\n0\nHappy\nHappy\n\n\n3\n1\n110000\n0\n1\nHappy\nHappy\n\n\n4\n1\n120000\n1\n0\nHappy\nHappy\n\n\n5\n1\n150000\n1\n1\nHappy\nHappy\n\n\n6\n0\n150000\n1\n0\nUnhappy\nHappy",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#intuition",
    "href": "slides-02-terminology-decision-trees.html#intuition",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Intuition",
    "text": "Intuition\n\nDecision trees find the ‚Äúbest‚Äù way to split data to make predictions.\nEach split is based on a question, like ‚ÄòAre the colleagues supportive?‚Äô\nThe goal is to group data by similar outcomes at each step.\nNow, let‚Äôs see a decision tree using sklearn.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-tree-with-sklearn",
    "href": "slides-02-terminology-decision-trees.html#decision-tree-with-sklearn",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision tree with sklearn",
    "text": "Decision tree with sklearn\nLet‚Äôs train a simple decision tree on our toy dataset.\n\nfrom sklearn.tree import DecisionTreeClassifier # import the classifier\nfrom sklearn.tree import plot_tree\n\nmodel = DecisionTreeClassifier(max_depth=2, random_state=1) # Create a class object\nmodel.fit(X, y)\nplot_tree(model, filled=True, feature_names = X.columns, class_names=[\"Happy\", \"Unhappy\"], impurity = False, fontsize=12);",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction",
    "href": "slides-02-terminology-decision-trees.html#prediction",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction",
    "text": "Prediction\n\nGiven a new example, how does a decision tree predict the class of this example?\n\nWhat would be the prediction for the example below using the tree above?\n\nsupportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#prediction-with-sklearn",
    "href": "slides-02-terminology-decision-trees.html#prediction-with-sklearn",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Prediction with sklearn",
    "text": "Prediction with sklearn\n\nWhat would be the prediction for the example below using the tree above?\n\nsupportive_colleagues = 1, salary = 60000, coffee_machine = 0, vegan_boss = 1,\n\n\n\ntest_example = [[1, 60000, 0, 1]]\nprint(\"Model prediction: \", model.predict(test_example))\nplot_tree(model, filled=True, feature_names = X.columns, class_names = [\"Happy\", \"Unhappy\"], impurity = False, fontsize=9);\n\nModel prediction:  ['Unhappy']",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training-high-level",
    "href": "slides-02-terminology-decision-trees.html#training-high-level",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training (high level)",
    "text": "Training (high level)\n\nHow many possible questions could we ask in this context?\n\n\n\n\n\n\n\n\n\n\nsupportive_colleagues\nsalary\nfree_coffee\nboss_vegan\n\n\n\n\n0\n0\n70000\n0\n1\n\n\n1\n1\n60000\n0\n0\n\n\n2\n1\n80000\n1\n0\n\n\n3\n1\n110000\n0\n1\n\n\n4\n1\n120000\n1\n0\n\n\n5\n1\n150000\n1\n1\n\n\n6\n0\n150000\n1\n0",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#training-high-level-1",
    "href": "slides-02-terminology-decision-trees.html#training-high-level-1",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Training (high level)",
    "text": "Training (high level)\n\nDecision tree learning is a search process to find the ‚Äúbest‚Äù tree among many possible ones.\nWe evaluate questions using measures like information gain or the Gini index to find the most effective split.\nAt each step, we aim to split the data into groups with more certainty in their outcomes.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#parameters-vs.-hyperparameters",
    "href": "slides-02-terminology-decision-trees.html#parameters-vs.-hyperparameters",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Parameters vs.¬†Hyperparameters",
    "text": "Parameters vs.¬†Hyperparameters\n\nParameters\n\nThe questions (features and thresholds) used to split the data at each node.\nExample: salary &lt;= 75000 at the root node\n\n\nHyperparameters\n\nSettings that control tree growth, like max_depth, which limits how deep the tree can go.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth1",
    "href": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth1",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision boundary with max_depth=1",
    "text": "Decision boundary with max_depth=1",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth2",
    "href": "slides-02-terminology-decision-trees.html#decision-boundary-with-max_depth2",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "Decision boundary with max_depth=2",
    "text": "Decision boundary with max_depth=2",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.2-supervised-vs-unsupervised",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.2-supervised-vs-unsupervised",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.2: Supervised vs unsupervised",
    "text": "iClicker 2.2: Supervised vs unsupervised\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are examples of supervised machine learning\n\n\nFinding groups of similar properties in a real estate data set.\n\n\nPredicting whether someone will have a heart attack or not on the basis of demographic, diet, and clinical measurement.\n\n\nGrouping articles on different topics from different news sources (something like the Google News app).\n\n\nDetecting credit card fraud based on examples of fraudulent and non-fraudulent transactions.\n\n\nGiven some measure of employee performance, identify the key factors which are likely to influence their performance.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.3-classification-vs.-regression",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.3-classification-vs.-regression",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.3: Classification vs.¬†Regression",
    "text": "iClicker 2.3: Classification vs.¬†Regression\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are examples of regression problems\n\n\nPredicting the price of a house based on features such as number of bedrooms and the year built.\n\n\nPredicting if a house will sell or not based on features like the price of the house, number of rooms, etc.\n\n\nPredicting percentage grade in CPSC 330 based on past grades.\n\n\nPredicting whether you should bicycle tomorrow or not based on the weather forecast.\n\n\nPredicting appropriate thermostat temperature based on the wind speed and the number of people in a room.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#iclicker-2.5-baselines-and-decision-trees",
    "href": "slides-02-terminology-decision-trees.html#iclicker-2.5-baselines-and-decision-trees",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "iClicker 2.5: Baselines and Decision trees",
    "text": "iClicker 2.5: Baselines and Decision trees\niClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nChange in features (i.e., binarizing features above) would change DummyClassifier predictions.\n\n\npredict takes only X as argument whereas fit and score take both X and y as arguments.\n\n\nFor the decision tree algorithm to work, the feature values must be binary.\n\n\nThe prediction in a decision tree works by routing the example from the root to the leaf.",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides-02-terminology-decision-trees.html#hw2-worksheet-portion",
    "href": "slides-02-terminology-decision-trees.html#hw2-worksheet-portion",
    "title": "Lecture 2: Terminology, Baselines, Decision Trees",
    "section": "HW2 Worksheet portion",
    "text": "HW2 Worksheet portion",
    "crumbs": [
      "Lecture 2: Terminology, Baselines, Decision Trees"
    ]
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Overview",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\n\n\n\n\nLecture 1: Introduction to CPSC 330\n\n\nWhat is machine learning, types of machine learning, learning to navigate through the course materials, getting familiar with the course policies\n\n\n\n\nLecture 2: Terminology, Baselines, Decision Trees\n\n\nSupervised machine learning terminology: Features, target, examples, training, parameters and hyperparameters, Decision boundary, classification vs.¬†regression, inference vs.¬†prediction, accuracy vs.¬†error, baselines, intuition of decision trees\n\n\n\n\nLecture 3: ML fundamentals\n\n\ngeneralization, data splitting, overfitting, underfitting, the fundamental tradeoff, the golden rule\n\n\n\n\nLecture 4: \\(k\\)-nearest neighbours and SVM RBFs\n\n\nintroduction to KNNs, hyperparameter n_neighbours or \\(k\\), C and gamma hyperparameters of SVM RBF, decision boundaries with different values of hyperparameters.\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#announcements",
    "href": "slides-03-ml-fundamentals.html#announcements",
    "title": "Lecture 3: ML fundamentals",
    "section": "Announcements",
    "text": "Announcements\n\nHomework 2 (hw2) has been released (Due: Sept 16, 11:59pm)\n\nYou are welcome to broadly discuss it with your classmates but final answers and submissions must be your own.\nGroup submissions are not allowed for this assignment.\n\nAdvice on keeping up with the material\n\nPractice!\nMake sure you run the lecture notes on your laptop and experiment with the code.\nStart early on homework assignments.\n\nIf you are still on the waitlist, it‚Äôs your responsibility to keep up with the material and submit assignments.\nLast day to drop without a W standing: Sept 16, 2023",
    "crumbs": [
      "Lecture 3: ML fundamentals"
    ]
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#recap",
    "href": "slides-03-ml-fundamentals.html#recap",
    "title": "Lecture 3: ML fundamentals",
    "section": "Recap",
    "text": "Recap\n\nImportance of generalization in supervised machine learning\nData splitting as a way to approximate generalization error\nTrain, test, validation, deployment data\nOverfitting, underfitting, the fundamental tradeoff, and the golden rule.\nCross-validation",
    "crumbs": [
      "Lecture 3: ML fundamentals"
    ]
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#recap-1",
    "href": "slides-03-ml-fundamentals.html#recap-1",
    "title": "Lecture 3: ML fundamentals",
    "section": "Recap",
    "text": "Recap\nA typical sequence of steps to train supervised machine learning models\n\ntraining the model on the train split\ntuning hyperparamters using the validation split\nchecking the generalization performance on the test split",
    "crumbs": [
      "Lecture 3: ML fundamentals"
    ]
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#iclicker-3.1",
    "href": "slides-03-ml-fundamentals.html#iclicker-3.1",
    "title": "Lecture 3: ML fundamentals",
    "section": "iClicker 3.1",
    "text": "iClicker 3.1\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\nA decision tree model with no depth (the default max_depth in sklearn) is likely to perform very well on the deployment data.\n\n\nData splitting helps us assess how well our model would generalize.\n\n\nDeployment data is only scored once.\n\n\nValidation data could be used for hyperparameter optimization.\n\n\nIt‚Äôs recommended that data be shuffled before splitting it into train and test sets.",
    "crumbs": [
      "Lecture 3: ML fundamentals"
    ]
  },
  {
    "objectID": "slides-03-ml-fundamentals.html#iclicker-3.2",
    "href": "slides-03-ml-fundamentals.html#iclicker-3.2",
    "title": "Lecture 3: ML fundamentals",
    "section": "iClicker 3.2",
    "text": "iClicker 3.2\nClicker cloud join link: https://join.iclicker.com/VYFJ\nSelect all of the following statements which are TRUE.\n\n\\(k\\)-fold cross-validation calls fit \\(k\\) times\nWe use cross-validation to get a more robust estimate of model performance.\nIf the mean train accuracy is much higher than the mean cross-validation accuracy it‚Äôs likely to be a case of overfitting.\nThe fundamental tradeoff of ML states that as training error goes down, validation error goes up.\nA decision stump on a complicated classification problem is likely to underfit.",
    "crumbs": [
      "Lecture 3: ML fundamentals"
    ]
  }
]