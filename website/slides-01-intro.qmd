---
title: 'Lecture 1: Introduction to CPSC 330'
description: Introduction to ML and CPSC 330
description-short: 'What is machine learning, types of machine learning, learning to navigate through the course materials, getting familiar with the course policies'
format:
  revealjs:
    slide-number: true
    smaller: true
    center: true
    logo: img/UBC-CS-logo.png
    resources:
      - data/
      - img/
---

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys
sys.path.append(os.path.join(os.path.abspath("."), "code"))
from IPython.display import HTML, display
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.pipeline import make_pipeline

plt.rcParams["font.size"] = 16
pd.set_option("display.max_colwidth", 200)

DATA_DIR = 'data/' 
```

## Learning outcomes 
From this lecture, you will be able to 

- Explain the motivation behind study machine learning. 
- Briefly describe supervised learning.
- Differentiate between traditional programming and machine learning.
- Assess whether a given problem is suitable for a machine learning solution.
- Navigate through the course material. 
- Be familiar with the policies and how the class is going to run.

## QR code of CPSC 330 website
\

- Course Jupyter book: https://ubc-cs.github.io/cpsc330-2024W1
- Course GitHub repository: https://github.com/UBC-CS/cpsc330-2024W1

![](img/CPSC330-QR-code.png){.nostretch fig-align="center" width="500px"}

# ü§ù Introductions ü§ù {.middle}

## Meet your instructor {background="#43464B"}

:::: {.columns}

::: {.column width="20%"}
<img src="img/varada.png" height="150" width="150">
:::

::: {.column width="80%"}
- Varada Kolhatkar [[ ã…ô…æ…ôda k…îÀêl…¶…ô àk…ôr](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet)]
- You can call me Varada, **V**, or **Ada**.
- I am an Assistant Professor of Teaching in the Department of Computer Science.
- I did my Ph.D. in Computational Linguistics at the University of Toronto. 
- I primarily teach machine learning courses in the [Master of Data Science (MDS) program](https://masterdatascience.ubc.ca/). 
- Contact information
    - Email: kvarada@cs.ubc.ca
    - Office: ICCS 237
:::

::::

## Meet Eva (a fictitious persona)!

:::: {.columns}

::: {.column width="40%"}
![](img/eva-hi.png)
:::

::: {.column width="60%"}
Eva is among one of you. She has some experience in Python programming. She knows machine learning as a buzz word. During her recent internship, she has developed some interest and curiosity in the field. She wants to learn what is it and how to use it. She is a curious person and usually has a lot of questions!  
:::

::::

## You all

- Introduce yourself to your neighbour. 
- Since we're going to spend the semester with each other, I would like to know you a bit better. 
- Please fill out [Getting to know you survey](https://canvas.ubc.ca/courses/149122/quizzes) when you get a chance.

## Asking questions during class
You are welcome to ask questions by raising your hand.
There is also [a reflection Google Document](https://docs.google.com/document/d/1q9peVKhyoVhrmZ9Afk4LOGlVJA3GXStuVKQWVQDOG2o/edit?usp=sharing) for this course for your questions/comments/reflections. It will be great if you can write about your takeaways, struggle points, and general comments in this document so that I'll try to address those points in the next lecture. 


## Activity 1: https://shorturl.at/CteOU
\

- Write your answers to the questions below in this Google doc: https://shorturl.at/CteOU

* What do you know about machine learning?
* What would you like to get out this course?
* Are there any particular topics or aspects of this course that you are especially excited or anxious about? Why?


# What is Machine Learning (ML)?

## Spam prediction 

- Suppose you are given some data with labeled spam and non-spam messages 

::: panel-tabset
### Code

```{python}
#| echo: true
sms_df = pd.read_csv(DATA_DIR + "spam.csv", encoding="latin-1")
sms_df = sms_df.drop(columns = ["Unnamed: 2", "Unnamed: 3", "Unnamed: 4"])
sms_df = sms_df.rename(columns={"v1": "target", "v2": "sms"})
train_df, test_df = train_test_split(sms_df, test_size=0.10, random_state=42)
```

### Output

::: {.scroll-container style="overflow-y: scroll; height: 400px;"}

```{python}
HTML(train_df.head().to_html(index=False))
```

:::

:::

## Traditional programming vs. ML

- Imagine writing a Python program for spam identification, i.e., whether a text message or an email is spam or non-spam. 
- Traditional programming 
    - Come up with rules using human understanding of spam messages. 
    - Time consuming and hard to come up with robust set of rules. 
- Machine learning
    - Collect large amount of data of spam and non-spam emails and let the machine learning algorithm figure out rules. 

## Let's train a model 

- There are several packages that help us perform machine learning.

```{python}
#| echo: true
X_train, y_train = train_df["sms"], train_df["target"]
X_test, y_test = test_df["sms"], test_df["target"]
clf = make_pipeline(CountVectorizer(max_features=5000), LogisticRegression(max_iter=5000))
clf.fit(X_train, y_train); # Training the model
```

## Unseen messages

- Now use the trained model to predict targets of unseen messages:

```{python}
pd.DataFrame(X_test[0:4])
```

## Predicting on unseen data {.smaller}

**The model is accurately predicting labels for the unseen text messages above!**

```{python}
pred_dict = {
    "sms": X_test[0:4],
    "spam_predictions": clf.predict(X_test[0:4]),
}
pred_df = pd.DataFrame(pred_dict)
pred_df.style.set_properties(**{"text-align": "left"})
```

## A different way to solve problems 

Machine learning uses computer programs to model data. It can be used to extract hidden patterns, make predictions in new situation, or generate novel content.   

<blockquote>
A field of study that gives computers the ability to learn without being explicitly programmed. <br> -- Arthur Samuel (1959)
</blockquote>


## ML vs. traditional programming

- With machine learning, you're likely to 
    - Save time 
    - Customize and scale products 

![](img/traditional-programming-vs-ML.png){.nostretch fig-align="center" width="500px"}

## Prevalence of ML

Let's look at some examples. 

<!-- <img src="img/ml-examples.png" height="1000" width="1000">  -->
![](img/ml-examples.png)

## Activity: For what type of problems ML is appropriate? (~5 mins)

Discuss with your neighbour for which of the following problems you would use machine learning 

- Finding a list of prime numbers up to a limit
- Given an image, automatically identifying and labeling objects in the image
- Finding the distance between two nodes in a graph 

## Types of machine learning

Here are some typical learning problems. 

- **Supervised learning** ([Gmail spam filtering](https://support.google.com/a/answer/2368132?hl=en))
    - Training a model from input data and its corresponding targets to predict targets for new examples.     
- Unsupervised learning ([Google News](https://news.google.com/))
    - Training a model to find patterns in a dataset, typically an unlabeled dataset.
- Reinforcement learning ([AlphaGo](https://deepmind.com/research/case-studies/alphago-the-story-so-far))
    - A family of algorithms for finding suitable actions to take in a given situation in order to maximize a reward. 
- Recommendation systems ([Amazon item recommendation system](https://www.cs.umd.edu/~samir/498/Amazon-Recommendations.pdf))
    - Predict the "rating" or "preference" a user would give to an item.    

## What is supervised learning? 

- Training data comprises a set of observations ($X$) and their corresponding targets ($y$). 
- We wish to find a model function $f$ that relates $X$ to $y$.
- We use the model function to predict targets of new examples. 

![](img/sup-learning.png){.nostretch fig-align="center" width="700px"}


## ü§î Eva's questions
\

At this point, Eva is wondering about many questions. 

- How are we exactly "learning" whether a message is spam and ham? 
- Are we expected to get correct predictions for all possible messages? How does it predict the label for a message it has not seen before?  
- What if the model mis-labels an unseen example? For instance, what if the model incorrectly predicts a non-spam as a spam? What would be the consequences? 
- How do we measure the success or failure of spam identification? 
- If you want to use this model in the wild, how do you know how reliable it is?  
- Would it be useful to know how confident the model is about the predictions rather than just a yes or a no?

It's great to think about these questions right now. But Eva has to be patient. By the end of this course you'll know answers to many of these questions!  

## Predicting labels of a given image 

- We can also use machine learning to predict labels of given images using a technique called **transfer learning**. 

::: {.scroll-container style="overflow-y: scroll; height: 400px;"}

```{python}
import img_classify
from PIL import Image
import glob
import matplotlib.pyplot as plt
# Predict topn labels and their associated probabilities for unseen images
images = glob.glob(DATA_DIR + "test_images/*.*")
class_labels_file = DATA_DIR + 'imagenet_classes.txt'
for img_path in images:
    img = Image.open(img_path).convert('RGB')
    img.load()
    plt.imshow(img)
    plt.show();    
    df = img_classify.classify_image(img_path, class_labels_file)
    print(df.to_string(index=False))
    print("--------------------------------------------------------------")
```

:::

## Predicting housing prices

Suppose we want to predict housing prices given a number of attributes associated with houses. The target here is **continuous** and not **discrete**. 

```{python}
df = pd.read_csv( DATA_DIR + "kc_house_data.csv")
df = df.drop(columns = ["id", "date"])
df.rename(columns={"price": "target"}, inplace=True)
train_df, test_df = train_test_split(df, test_size=0.2, random_state=4)
HTML(train_df.head().to_html(index=False))
```

## Building a regression model

```{python}
#| echo: true
from lightgbm.sklearn import LGBMRegressor

X_train, y_train = train_df.drop(columns= ["target"]), train_df["target"]
X_test, y_test = test_df.drop(columns= ["target"]), train_df["target"]

model = LGBMRegressor()
model.fit(X_train, y_train);
```

## Predicting prices of unseen houses

```{python}
pred_df = pd.DataFrame(
    # {"Predicted target": model.predict(X_test[0:4]).tolist(), "Actual price": y_test[0:4].tolist()}
    {"Predicted_target": model.predict(X_test[0:4]).tolist()}
)
df_concat = pd.concat([pred_df, X_test[0:4].reset_index(drop=True)], axis=1)
HTML(df_concat.to_html(index=False))
```

We are predicting continuous values here as apposed to discrete values in `spam` vs. `ham` example. 

## Machine learning workflow 

Supervised machine learning is quite flexible; it can be used on a variety of problems and different kinds of data. Here is a typical workflow of a supervised machine learning systems.  

![](img/ml-workflow.png){.nostretch fig-align="center" width="700px"}

<!-- <img src="img/ml-workflow.png" height="800" width="800">  -->

We will build machine learning pipelines in this course, focusing on some of the steps above. 

<br><br>

## ‚ùì‚ùì Questions for you

iClicker cloud join link: https://join.iclicker.com/VYFJ

### Select all of the following statements which are **True** (iClicker)

- (A) Predicting spam is an example of machine learning. 
- (B) Predicting housing prices is not an example of machine learning. 
- (C) For problems such as spelling correction, translation, face recognition, spam identification, if you are a domain expert, it's usually faster and scalable to come up with a robust set of rules manually rather than building a machine learning model. 
- (D) If you are asked to write a program to find all prime numbers up to  a limit, it is better to implement one of the algorithms for doing so rather than using machine learning. 
- (E) Google News is likely be using machine learning to organize news. 
<br><br><br><br>

## Surveys

- Please complete the "Getting to know you" survey on [Canvas]().
- Also, please complete the anonymous restaurant survey on Qualtrics [here](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw).
  - We will try to analyze this data set in the coming weeks. 

## About this course

::: {.callout-important}
Course website: [https://github.com/UBC-CS/cpsc330-2024W1](https://github.com/UBC-CS/cpsc330-2024W1) is the most important link. Please read everything on this GitHub page!
:::

::: {.callout-important}
Make sure you go through the syllabus thoroughly and complete the syllabus quiz before Monday, Sept 19th at 11:59pm. 
:::

## CPSC 330 vs. 340

Read [https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md]([https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/330_vs_340.md)
which explains the difference between two courses.  

**TLDR:**

- 340: how do ML models work?
- 330: how do I use ML models?
- CPSC 340 has many prerequisites. 
- CPSC 340 goes deeper but has a more narrow scope.
- I think CPSC 330 will be more useful if you just plan to apply basic ML.

## Registration, waitlist and prerequisites

::: {.callout-important}
Please go through [this document](https://github.com/UBC-CS/cpsc330-2024W1/blob/master/docs/course_info.md#registration) carefully before contacting your instructors about these issues. Even then, we are very unlikely to be able to help with registration, waitlist or prerequisite issues.
:::

- If you are on waitlist and if you'd like to try your chances, you should be able to access [Canvas](https://canvas.ubc.ca/courses/149122) and Piazza.  
- If you're unable to make it this time, there will be two sections of this course offered next semester and then again in the summer.

## Lecture format

- In person lectures T/Th.
- Sometimes there will be videos to watch before lecture. You will find the list of pre-watch videos in the schedule on the course webpage.
- We will also try to work on some questions and exercises together during the class. 
- All materials will be posted in this GitHub repository. 
- Weekly tutorials will be **office hour format** run by the TAs and are **completely optional**.
  - You do not need to be registered in a tutorial.
  - You can attend whatever tutorials or office hours your want, regardless of in which/whether you're registered.

## Home work assignments
- First homework assignment is due **this coming Tuesday**, September 10, midnight. This is a relatively straightforward assignment on Python. If you struggle with this assignment then that could be a sign that you will struggle later on in the course.    
- You must do the first two homework assignments on your own.

## Exams 

- We'll have two self-scheduled midterms and one final in Computer-based Testing Facility (CBTF). 

## Course calendar

Here is our course Calendar. Make sure you check it on a regular basis: 

[https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html](https://htmlpreview.github.io/?https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/calendar.html)

## Course structure

- Introduction
  - Week 1 
- Part I: ML fundamentals, preprocessing, midterm 1
  - Weeks 2, 3, 4, 5, 6, 7, 8
- Part II: Unsupervised learning, transfer learning, common special cases, midterm 1
  - Weeks 8, 9, 10, 11, 12
- Part III: Communication and ethics
  - ML skills are not beneficial if you can't use them responsibly and communicate your results. In this module we'll talk about these aspects. 
  - Weeks 13, 14

## Code of conduct

- Our main forum for getting help will be [Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024w1).

::: {.callout-important}
Please read [this entire document about asking for help](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/asking_for_help.md).
**TLDR:** Be nice.
:::


## Homework format: Jupyter notebooks

- Our notes are created in a [Jupyter notebook](https://jupyter.org/), with file extension `.ipynb`.
- Also, you will complete your homework assignments using Jupyter notebooks.
- Confusingly, "Jupyter notebook" is also the original application that opens `.ipynb` files - but has since been replaced by **Jupyter lab**.
  - I am using Jupyter lab, some things might not work with the Jupyter notebook application.
  - You can also open these files in Visual Studio Code.

## Jupyter notebooks 

- Notebooks contain a mix of code, code output, markdown-formatted text (including LaTeX equations), and more.
- When you open a Jupyter notebook in one of these apps, the document is ‚Äúlive‚Äù, meaning you can run the code.

For example:

```{python}
#| echo: true
1 + 1
```

```{python}
#| echo: true
x = [1, 2, 3]
x[0] = 9999
x
```

## Jupyter 

- By default, Jupyter prints out the result of the last line of code, so you don't need as many `print` statements.
- In addition to the "live" notebooks, Jupyter notebooks can be statically rendered in the web browser, e.g. [this](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/lectures/01_intro.ipynb).
  - This can be convenient for quick read-only access, without needing to launch the Jupyter notebook/lab application.
  - But you need to launch the app properly to interact with the notebooks.

## Lecture notes

- All the lectures from last year are [available here](https://ubc-cs.github.io/cpsc330-2023W1/README.html).
- We cannot promise anything will stay the same from last year to this year, so read them in advance at your own risk.
- A "finalized" version will be pushed to [GitHub](https://github.com/UBC-CS/cpsc330-2024W1) and the [Jupyter book](https://ubc-cs.github.io/cpsc330-2024W1/README.html) right before each class.
- Each instructor will have slightly adapted versions of notes to present slides during lectures.  
- You will find the link to these slides in our repository: 
https://github.com/UBC-CS/cpsc330-2024W1/tree/main/lectures/102-Varada-lectures

## Grades

- The grading breakdown is [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/syllabus.md#grading-scheme). 
- The policy on challenging grades is [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/grades.md).

# Setting up your computer for the course 

## Recommended browser and tools

- You can install Chrome [here](https://www.google.com/chrome/).
- You can install Firefox [here](https://www.mozilla.org/en-US/firefox/new/). 

In this course, we will primarily be using `Python` , `git`, `GitHub`, `Canvas`, `Gradescope`, `Piazza`, and `PrairieLearn`. 

## Course `conda` environment

- Follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2024W1/docs/setup.html) to create a course `conda` environment on your computer. 
- If you do not have your computer with you, you can partner up with someone and set up your own computer later.

## Python requirements/resources

We will primarily use Python in this course.

Here is the basic Python knowledge you'll need for the course: 

- Basic Python programming
- Numpy
- Pandas
- Basic matplotlib
- Sparse matrices

Homework 1 is all about Python.

:::{.callout-note}
We do not have time to teach all the Python we need 
but you can find some useful Python resources [here](https://github.com/UBC-CS/cpsc330-2024W1/blob/main/docs/resources.md).  
:::

<br><br>

## Checklist for you before the next class

- [ ] Are you able to access course [Canvas](https://canvas.ubc.ca/courses/149122) shell? 
- [ ] Are you able to access [course Piazza](https://piazza.com/ubc.ca/winterterm12024/cpsc_v3301011021032024w1)?
- [ ] Are you able to access [Gradescope](https://www.gradescope.ca/courses/18608)? (If not, refer to the [Gradescope Student Guide](https://lthub.ubc.ca/guides/gradescope-student-guide/).)
- [ ] Are you able to access [iClicker Cloud](https://join.iclicker.com/VYFJ) for this course?
- [ ] Did you follow the setup instructions [here](https://ubc-cs.github.io/cpsc330-2024W1/docs/setup.html) to create a course conda environment on your computer?
- [ ] Did you complete the "Getting to know you" survey on Canvas?
- [ ] Did you complete the anonymous [restaurant survey on Qualtrics](https://ubc.ca1.qualtrics.com/jfe/form/SV_73VuZiuwM1eDVrw)?
- [ ] Are you almost finished or at least started with homework 1?
